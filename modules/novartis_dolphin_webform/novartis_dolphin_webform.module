<?php

/**
 * @file
 * Contains various customization to webform module.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\webform\WebformInterface;

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function novartis_dolphin_webform_webform_insert(WebformInterface $webform) {

  $handler_manager = \Drupal::service('plugin.manager.webform.handler');

  $quiz_settings = $webform->getThirdPartySetting('novartis_dolphin_webform', 'novartis_dolphin_quiz_settings', []);

  if (!empty($quiz_settings['quiz_enabled']) && $quiz_settings['quiz_enabled']) {
    $handler_type = 'novartis_dolphin_webform_quiz_result';
  }
  else {
    $handler_type = 'novartis_dolphin_webform_file_write';
  }

  // Configure webform handler to all webforms.
  $handler_configuration = _novartis_dolphin_webform_handler_settings($handler_type);

  $handler = $handler_manager->createInstance($handler_type, $handler_configuration);

  // Must set original id so that the webform can be resaved.
  $webform->setOriginalId($webform->id());

  // Disable submissions on this webform by default.
  $webform->setSetting('results_disabled', TRUE);

  // Define a captcha element for webform.
  $webform_elements = [
    'captcha' => [
      '#type' => 'captcha',
    ],
  ];

  // Set the webform elements.
  $webform->setElements($webform_elements);

  // Add webform handler which also triggers Webform::save().
  $webform->addWebformHandler($handler);
}

/**
 * Helper function to return default settings for a handler type.
 *
 * @param string $type
 *   Type of handler.
 *
 * @return array
 *   List of default configurations for a handler.
 */
function _novartis_dolphin_webform_handler_settings($type) {
  $handler_configuration = [];

  switch ($type) {
    case 'novartis_dolphin_webform_file_write':
      $handler_configuration = [
        'id' => 'novartis_dolphin_webform_file_write',
        'label' => 'Dolphin Webform Submissions to File',
        'handler_id' => 'novartis_dolphin_webform_file_write',
        'status' => 1,
        'weight' => 0,
        'settings' => [],
      ];
      break;

    case 'novartis_dolphin_webform_quiz_result':
      $handler_configuration = [
        'id' => 'novartis_dolphin_webform_quiz_result',
        'label' => 'Dolphin Webform Quiz results generator',
        'handler_id' => 'novartis_dolphin_webform_quiz_result',
        'status' => 1,
        'weight' => 0,
        'settings' => [],
      ];
  }
  return $handler_configuration;
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function novartis_dolphin_webform_form_webform_settings_form_alter(&$form, FormStateInterface $form_state) {
  if (isset($form['general_settings']['results_disabled'])) {
    $form['general_settings']['results_disabled']['#disabled'] = TRUE;
    $form['general_settings']['results_disabled']['#default_value'] = TRUE;
    array_unshift($form['actions']['submit']['#submit'], '_novartis_dolphin_webform_disable_submissions');
  }
}

/**
 * Always disable submissions on a webform.
 */
function _novartis_dolphin_webform_disable_submissions($form, FormStateInterface $form_state) {
  $form_state->setValue('results_disabled', TRUE);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function novartis_dolphin_webform_form_webform_add_form_alter(&$form, FormStateInterface $form_state) {
  $webform = $form_state->getFormObject()->getEntity();
  $quiz_settings = $webform->getThirdPartySetting('novartis_dolphin_webform', 'novartis_dolphin_quiz_settings', []);
  $form['quiz_enabled'] = [
    '#type' => 'checkbox',
    '#title' => t("Build a quiz."),
    '#description' => t("If checked this webform will set configuations for building a quiz."),
    '#default_value' => !empty($quiz_settings['quiz_enabled']) ?? FALSE,
  ];
  array_unshift($form['actions']['submit']['#submit'], '_novartis_dolphin_webform_save_quiz_settings');
}

/**
 * Submit handler for setting quiz configs in the webform.
 */
function _novartis_dolphin_webform_save_quiz_settings($form, FormStateInterface $form_state) {
  $webform = $form_state->getFormObject()->getEntity();
  $quiz_settings = $webform->getThirdPartySetting('novartis_dolphin_webform', 'novartis_dolphin_quiz_settings', []);
  $quiz_settings['quiz_enabled'] = $form_state->getValue('quiz_enabled');
  $webform->setThirdPartySetting('novartis_dolphin_webform', 'novartis_dolphin_quiz_settings', $quiz_settings);

  // Set default settings to webform which are helpful in building a quiz.
  $webform_quiz_defaults = [
    'ajax' => TRUE,
    'ajax_scroll_top' => 'form',
    'wizard_progress_bar' => FALSE,
    'wizard_progress_pages' => TRUE,
    'wizard_progress_percentage' => FALSE,
    'wizard_progress_link' => FALSE,
    'wizard_confirmation' => FALSE,
    'confirmation_type' => 'inline',
    'confirmation_message' => 'You have completed the quiz.',
  ];
  foreach ($webform_quiz_defaults as $setting_name => $setting_value) {
    $webform->setSetting($setting_name, $setting_value);
  }
}

/**
 * Implements hook_webform_submission_form_alter().
 */
function novartis_dolphin_webform_webform_submission_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $webform_submission = $form_state->getFormObject()->getEntity();
  $webform = $webform_submission->getWebform();
  $quiz_settings = $webform->getThirdPartySetting('novartis_dolphin_webform', 'novartis_dolphin_quiz_settings', []);
  if (!empty($quiz_settings['quiz_enabled']) && $quiz_settings['quiz_enabled']) {
    // Adding a class to webform for quiz specific theming.
    $form['#attributes']['class'][] = 'webform-quiz';
    $form['#quiz'] = 'true';
  }
}

/**
 * Implements hook_webform_element_info_alter().
 */
function novartis_dolphin_webform_webform_element_info_alter(array &$definitions) {
  $quiz_elements = [
    'webform_score_radios' => t('Quiz Radios'),
    'webform_score_textfield' => t('Quiz textfield'),
  ];

  foreach ($quiz_elements as $element_name => $label) {
    if (isset($definitions[$element_name])) {
      $definitions[$element_name]['label'] = $label;
    }
  }
}
